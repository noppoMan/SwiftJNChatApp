/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: User.proto
 *
 */

import Foundation
import SwiftProtobuf


struct User: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "User"}
  public var protoMessageName: String {return "User"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "login", swift: "login"),
    3: .same(proto: "name", swift: "name"),
    4: .same(proto: "avaterURL", swift: "avaterURL"),
  ]


  var id: Int32 = 0

  var login: String = ""

  var name: String = ""

  var avaterURL: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &login)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &name)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &avaterURL)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: id, fieldNumber: 1)
    }
    if login != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: login, fieldNumber: 2)
    }
    if name != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: name, fieldNumber: 3)
    }
    if avaterURL != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: avaterURL, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: User) -> Bool {
    if id != other.id {return false}
    if login != other.login {return false}
    if name != other.name {return false}
    if avaterURL != other.avaterURL {return false}
    return true
  }
}
