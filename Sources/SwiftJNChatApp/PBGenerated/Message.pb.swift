/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: Message.proto
 *
 */

import Foundation
import SwiftProtobuf


struct Message: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Message"}
  public var protoMessageName: String {return "Message"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "user", swift: "user"),
    3: .same(proto: "text", swift: "text"),
    4: .same(proto: "createdAt", swift: "createdAt"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Message
    var _id: Int32 = 0
    var _user: User? = nil
    var _text: String = ""
    var _createdAt: Google_Protobuf_Timestamp? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_id)
      case 2: try setter.decodeSingularMessageField(fieldType: User.self, value: &_user)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_text)
      case 4: try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Timestamp.self, value: &_createdAt)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _id != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _id, fieldNumber: 1)
      }
      if let v = _user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _text != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _text, fieldNumber: 3)
      }
      if let v = _createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _id != other._id {return false}
      if _user != other._user {return false}
      if _text != other._text {return false}
      if _createdAt != other._createdAt {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._id = _id
      clone._user = _user
      clone._text = _text
      clone._createdAt = _createdAt
      return clone
    }
  }

  private var _storage = _StorageClass()


  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }
  public var hasUser: Bool {
    return _storage._user != nil
  }
  public mutating func clearUser() {
    return _storage._user = nil
  }

  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  var createdAt: Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  public var hasCreatedAt: Bool {
    return _storage._createdAt != nil
  }
  public mutating func clearCreatedAt() {
    return _storage._createdAt = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Message) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
