/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: Message.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Message: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Message"}
  public var protoMessageName: String {return "Message"}
  public var protoPackageName: String {return ""}
  public var jsonFieldNames: [String: Int] {return [
    "id": 1,
    "user": 2,
    "text": 3,
    "createdAt": 4,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "id": 1,
    "user": 2,
    "text": 3,
    "createdAt": 4,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Message
    var _id: Int32 = 0
    var _user: User? = nil
    var _text: String = ""
    var _createdAt: Google_Protobuf_Timestamp? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_id)
      case 2: handled = try setter.decodeSingularMessageField(fieldType: User.self, value: &_user)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_text)
      case 4: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Timestamp.self, value: &_createdAt)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if _id != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _id, protoFieldNumber: 1, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
      }
      if let v = _user {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "user", jsonFieldName: "user", swiftFieldName: "user")
      }
      if _text != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _text, protoFieldNumber: 3, protoFieldName: "text", jsonFieldName: "text", swiftFieldName: "text")
      }
      if let v = _createdAt {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 4, protoFieldName: "createdAt", jsonFieldName: "createdAt", swiftFieldName: "createdAt")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _id != other._id {return false}
      if _user != other._user {return false}
      if _text != other._text {return false}
      if _createdAt != other._createdAt {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._id = _id
      clone._user = _user
      clone._text = _text
      clone._createdAt = _createdAt
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }

  public var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  public var createdAt: Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public init() {}

  public init(id: Int32? = nil,
    user: User? = nil,
    text: String? = nil,
    createdAt: Google_Protobuf_Timestamp? = nil)
  {
    let storage = _uniqueStorage()
    if let v = id {
      storage._id = v
    }
    storage._user = user
    if let v = text {
      storage._text = v
    }
    storage._createdAt = createdAt
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Message) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
